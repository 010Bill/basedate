package servic.impl;

import servic.*;
import servic.DTO.StudentDO;
import servic.DTO.TableDTO;
import servic.Util.DBUtil;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;

public class StudentServiceImpl implements StudentService {
    @Override
    public TableDTO retrieveStudents(StudentRequest request) {
        StringBuilder sql = new StringBuilder();
        sql.append("select * from new_table ");
        if (request.getSearchKey() != null && !"".equals(request.getSearchKey().trim())) {
            sql.append("where name like'%" + request.getSearchKey().trim() + "%'");//模糊查询
        }
        sql.append("order by id desc limit ").append(request.getStart()).append(",").append(request.getPageSize());

        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        TableDTO returnDTO=new TableDTO();

        try {
            conn = DBUtil.getConn();
            ps = conn.prepareStatement(sql.toString());
            rs=ps.executeQuery();
            //查询记录
            returnDTO.setData(fillData(rs));

            sql.setLength(0);
            sql.append("select count(*)from new_table");
            if (request.getSearchKey() != null && !"".equals(request.getSearchKey().trim())) {
                sql.append("where name like'%" + request.getSearchKey().trim() + "%'");//模糊查询
            }
            ps=conn.prepareStatement(sql.toString());
            rs=ps.executeQuery();

            while (rs.next()){
                int count=rs.getInt(1);
                returnDTO.setTotalCount(count);
            }
               return returnDTO;
        }catch (Exception e){
          e.printStackTrace();
        }finally {
            DBUtil.closeRs(rs);
            DBUtil.closePs(ps);
            DBUtil.closeConn(conn);

        }

            return null;
        }

    @Override
    public boolean add(StudentDO studentDO) {
        StringBuilder sql = new StringBuilder();
        sql.append("inset into new_table (id name gender ids birthday math pe java)");
        sql.append("values(?,?,?,?,?,?,?,?)");

        Connection conn = null;
        PreparedStatement ps = null;

        try {
            conn = DBUtil.getConn();
            ps = conn.prepareStatement(sql.toString());
            ps.setString(1, studentDO.getName());
            ps.setString(2, studentDO.getGender());
            ps.setDouble(3, studentDO.getIds());
            ps.setString(4, studentDO.getBirthday());
            ps.setDouble(5, studentDO.getMath());
            ps.setDouble(6, studentDO.getPe());
            ps.setDouble(7, studentDO.getJava());
            return ps.executeUpdate()==1;//影响一条

        }catch (Exception e){
            e.printStackTrace();
        }finally {
            DBUtil.closePs(ps);
            DBUtil.closeConn(conn);

        }

        return false;
    }

    @Override
    public StudentDO getById(int selectedStudentId) {
        StringBuilder sql = new StringBuilder("select * from new_table where id = ?" );
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        StudentDO studentDO=new StudentDO();

        try {
            conn = DBUtil.getConn();
            ps = conn.prepareStatement(sql.toString());
            ps.setInt(1, selectedStudentId);
            rs=ps.executeQuery();
            while (rs.next()){
                //处理查询的每一条记录
                String id=rs.getString("id");
                String name = rs.getString("name");
                String gender = rs.getString("gender");
                int ids = rs.getInt("ids");
                String birthday = rs.getString("birthday");
                double math = rs.getDouble("math");
                double pe = rs.getDouble("PE");
                double java = rs.getDouble("JAVA");
                studentDO.setId(id);
                studentDO.setName(name);
                studentDO.setGender(gender);
                studentDO.setIds(ids);
                studentDO.setBirthday(birthday);
                studentDO.setMath(math);
                studentDO.setPe(pe);
                studentDO.setJava(java);

            }
            return studentDO;
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            DBUtil.closeRs(rs);
            DBUtil.closePs(ps);
            DBUtil.closeConn(conn);

        }

        return null;
    }

    @Override
    public boolean update(StudentDO studentDO) {

        StringBuilder sql = new StringBuilder();
        sql.append("update new_table set id=?, name=?, gender=?, ids=?, birthday=?, math=?, pe=?, java=?");
        sql.append("where id=?");

        Connection conn = null;
        PreparedStatement ps = null;

        try {
            conn = DBUtil.getConn();
            ps = conn.prepareStatement(sql.toString());
            ps.setString(1, studentDO.getId());
            ps.setString(2, studentDO.getName());
            ps.setString(3, studentDO.getGender());
            ps.setDouble(4, studentDO.getIds());
            ps.setString(5, studentDO.getBirthday());
            ps.setDouble(6, studentDO.getMath());
            ps.setDouble(7, studentDO.getPe());
            ps.setDouble(8, studentDO.getJava());

            return ps.executeUpdate()==1;//影响一条

        }catch (Exception e){
            e.printStackTrace();
        }finally {
            DBUtil.closePs(ps);
            DBUtil.closeConn(conn);

        }

        return false;
    }

    @Override
    public boolean delete(int[] selectedStudentIds) {
        StringBuilder sql = new StringBuilder();
        sql.append("delete from new_table where id in (");
        int length=selectedStudentIds.length;
        for (int i=0;i<length;i++){
            if(i==(length-1)){
                sql.append("?");
            }else {
                sql.append("?,");
            }
        }
        sql.append(")");

        Connection conn = null;
        PreparedStatement ps = null;

        try {
            conn = DBUtil.getConn();
            ps = conn.prepareStatement(sql.toString());
            for (int i=0;i<length;i++){
                //设置参数,从1开始
               ps.setInt(i+1, selectedStudentIds[i]);
                }
            return ps.executeUpdate()==length;//影响一条

        }catch (Exception e){
            e.printStackTrace();
        }finally {
            DBUtil.closePs(ps);
            DBUtil.closeConn(conn);

        }

        return false;
    }

    private Vector<Vector<Object>> fillData(ResultSet rs) throws SQLException {
        Vector<Vector<Object>>data=new Vector<>();
        while (rs.next()){
            //处理查询的每一条记录
            Vector<Object>oneRecord=new Vector<>();
            String id=rs.getString("id");
            String name = rs.getString("name");
            String gender = rs.getString("gender");
            double ids = rs.getInt("ids");
            String birthday = rs.getString("birthday");
            double math = rs.getDouble("math");
            double pe = rs.getDouble("PE");
            double java = rs.getDouble("JAVA");
            oneRecord.addElement(id);
            oneRecord.addElement(name);
            oneRecord.addElement(gender);
            oneRecord.addElement(ids);
            oneRecord.addElement(birthday);
            oneRecord.addElement(math);
            oneRecord.addElement(pe);
            oneRecord.addElement(java);
            data.addElement(oneRecord);
        }
        return data;
    }

}
